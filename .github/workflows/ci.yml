name: Pipeline de CI/CD

on:
  push:
    branches:
      - main
    tags:
      - '*'

jobs:
  teste:
    runs-on: ubuntu-latest

    steps:
      - name: Baixar código
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install httpx  # Adiciona a instalação do httpx

      - name: Executar testes
        run: |
          pytest

  build:
    needs: teste
    runs-on: ubuntu-latest

    steps:
      - name: Baixar código
        uses: actions/checkout@v3

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Fazer login no DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Capturar a tag do commit
        id: tag
        run: echo "GIT_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Construir imagem Docker
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/minha-aplicacao-fastapi:${{ env.GIT_TAG }} .

      - name: Enviar imagem Docker
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/minha-aplicacao-fastapi:${{ env.GIT_TAG }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Baixar código
        uses: actions/checkout@v3

      - name: Fazer deploy no servidor
        run: |
          echo "Realizando o deploy da aplicação..."
          ssh usuario@servidor "docker pull ${{ secrets.DOCKER_USERNAME }}/minha-aplicacao-fastapi:${{ env.GIT_TAG }} && docker run -d -p 80:8000 ${{ secrets.DOCKER_USERNAME }}/minha-aplicacao-fastapi:${{ env.GIT_TAG }}"