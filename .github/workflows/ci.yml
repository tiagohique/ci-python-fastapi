name: Pipeline de CI/CD

on:
  push:
    branches:
      - main

jobs:
  teste:
    runs-on: ubuntu-latest

    steps:
      - name: Baixar código
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Executar testes
        run: |
          # Assumindo que você usa pytest para testes
          pytest

  build:
    needs: teste
    runs-on: ubuntu-latest

    steps:
      - name: Baixar código
        uses: actions/checkout@v3

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Fazer login no DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Construir imagem Docker
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/minha-aplicacao-fastapi:latest .

      - name: Enviar imagem Docker
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/minha-aplicacao-fastapi:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Baixar código
        uses: actions/checkout@v3

      - name: Fazer deploy no servidor
        run: |
          echo "Realizando o deploy da aplicação..."
          # Aqui você pode usar o SSH ou outro método para rodar comandos no servidor
          ssh usuario@servidor "docker pull ${{ secrets.DOCKER_USERNAME }}/minha-aplicacao-fastapi:latest && docker run -d -p 80:8000 ${{ secrets.DOCKER_USERNAME }}/minha-aplicacao-fastapi:latest"